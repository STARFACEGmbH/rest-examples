/**
 * STARFACE Rest Api
 * A Rest API for STARFACE
 *
 * OpenAPI spec version: 6.7.0.22
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StarfaceRestApi);
  }
}(this, function(expect, StarfaceRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StarfaceRestApi.FunctionKeysApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FunctionKeysApi', function() {
    describe('createFunctionKey', function() {
      it('should call createFunctionKey successfully', function(done) {
        //uncomment below and update the code to test createFunctionKey
        //instance.createFunctionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFunctionKey', function() {
      it('should call deleteFunctionKey successfully', function(done) {
        //uncomment below and update the code to test deleteFunctionKey
        //instance.deleteFunctionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEditFunctionKey', function() {
      it('should call getEditFunctionKey successfully', function(done) {
        //uncomment below and update the code to test getEditFunctionKey
        //instance.getEditFunctionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEditFunctionKeyDefaults', function() {
      it('should call getEditFunctionKeyDefaults successfully', function(done) {
        //uncomment below and update the code to test getEditFunctionKeyDefaults
        //instance.getEditFunctionKeyDefaults(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFunctionKey', function() {
      it('should call getFunctionKey successfully', function(done) {
        //uncomment below and update the code to test getFunctionKey
        //instance.getFunctionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFunctionKeySets', function() {
      it('should call getFunctionKeySets successfully', function(done) {
        //uncomment below and update the code to test getFunctionKeySets
        //instance.getFunctionKeySets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFunctionKeys', function() {
      it('should call getFunctionKeys successfully', function(done) {
        //uncomment below and update the code to test getFunctionKeys
        //instance.getFunctionKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPhonesForFunctionKeySet', function() {
      it('should call getPhonesForFunctionKeySet successfully', function(done) {
        //uncomment below and update the code to test getPhonesForFunctionKeySet
        //instance.getPhonesForFunctionKeySet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putFunctionKeySetOnPhone', function() {
      it('should call putFunctionKeySetOnPhone successfully', function(done) {
        //uncomment below and update the code to test putFunctionKeySetOnPhone
        //instance.putFunctionKeySetOnPhone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFunctionKey', function() {
      it('should call updateFunctionKey successfully', function(done) {
        //uncomment below and update the code to test updateFunctionKey
        //instance.updateFunctionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFunctionKeySet', function() {
      it('should call updateFunctionKeySet successfully', function(done) {
        //uncomment below and update the code to test updateFunctionKeySet
        //instance.updateFunctionKeySet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
