/**
 * STARFACE Rest Api
 * A Rest API for STARFACE
 *
 * OpenAPI spec version: 6.7.0.22
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FmcPhone'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FmcPhone'));
  } else {
    // Browser globals (root is window)
    if (!root.StarfaceRestApi) {
      root.StarfaceRestApi = {};
    }
    root.StarfaceRestApi.IFMCApi = factory(root.StarfaceRestApi.ApiClient, root.StarfaceRestApi.FmcPhone);
  }
}(this, function(ApiClient, FmcPhone) {
  'use strict';

  /**
   * IFMC service.
   * @module api/IFMCApi
   * @version 6.7.0.22
   */

  /**
   * Constructs a new IFMCApi. 
   * @alias module:api/IFMCApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteFmcPhone operation.
     * @callback module:api/IFMCApi~deleteFmcPhoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a FmcPhone
     * Delete the FmcPhone with the given {fmcId}
     * @param {String} fmcId Id of the FmcPhone that will be deleted
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/IFMCApi~deleteFmcPhoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFmcPhone = function(fmcId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fmcId' is set
      if (fmcId === undefined || fmcId === null) {
        throw new Error("Missing the required parameter 'fmcId' when calling deleteFmcPhone");
      }


      var pathParams = {
        'fmcId': fmcId
      };
      var queryParams = {
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fmcPhones/{fmcId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFmcPhone operation.
     * @callback module:api/IFMCApi~getFmcPhoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FmcPhone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a FmcPhone
     * Fetch the FmcPhone with the given {fmcId}
     * @param {String} fmcId Id of the FmcPhone that will be fetched
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/IFMCApi~getFmcPhoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FmcPhone}
     */
    this.getFmcPhone = function(fmcId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fmcId' is set
      if (fmcId === undefined || fmcId === null) {
        throw new Error("Missing the required parameter 'fmcId' when calling getFmcPhone");
      }


      var pathParams = {
        'fmcId': fmcId
      };
      var queryParams = {
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FmcPhone;

      return this.apiClient.callApi(
        '/fmcPhones/{fmcId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFmcPhones operation.
     * @callback module:api/IFMCApi~getFmcPhonesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FmcPhone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of FmcPhones
     * Retrieve a list of STARFACE IFMC phones for the current user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/IFMCApi~getFmcPhonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FmcPhone>}
     */
    this.getFmcPhones = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FmcPhone];

      return this.apiClient.callApi(
        '/fmcPhones', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFmcPhone operation.
     * @callback module:api/IFMCApi~postFmcPhoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new FmcPhone
     * Create a new FmcPhone
     * @param {module:model/FmcPhone} fmcPhone FmcPhone object to add
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/IFMCApi~postFmcPhoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postFmcPhone = function(fmcPhone, opts, callback) {
      opts = opts || {};
      var postBody = fmcPhone;

      // verify the required parameter 'fmcPhone' is set
      if (fmcPhone === undefined || fmcPhone === null) {
        throw new Error("Missing the required parameter 'fmcPhone' when calling postFmcPhone");
      }


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fmcPhones', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putFmcPhone operation.
     * @callback module:api/IFMCApi~putFmcPhoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a FmcPhone
     * Update the FmcPhone with the given {fmcId}
     * @param {String} fmcId Id of the FmcPhone that will be updated
     * @param {module:model/FmcPhone} fmcPhone FmcPhone-Object with updated values that should be applied
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/IFMCApi~putFmcPhoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putFmcPhone = function(fmcId, fmcPhone, opts, callback) {
      opts = opts || {};
      var postBody = fmcPhone;

      // verify the required parameter 'fmcId' is set
      if (fmcId === undefined || fmcId === null) {
        throw new Error("Missing the required parameter 'fmcId' when calling putFmcPhone");
      }

      // verify the required parameter 'fmcPhone' is set
      if (fmcPhone === undefined || fmcPhone === null) {
        throw new Error("Missing the required parameter 'fmcPhone' when calling putFmcPhone");
      }


      var pathParams = {
        'fmcId': fmcId
      };
      var queryParams = {
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fmcPhones/{fmcId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
