/**
 * STARFACE Rest Api
 * A Rest API for STARFACE
 *
 * OpenAPI spec version: 6.7.0.22
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Redirection'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Redirection'));
  } else {
    // Browser globals (root is window)
    if (!root.StarfaceRestApi) {
      root.StarfaceRestApi = {};
    }
    root.StarfaceRestApi.RedirectsApi = factory(root.StarfaceRestApi.ApiClient, root.StarfaceRestApi.Redirection);
  }
}(this, function(ApiClient, Redirection) {
  'use strict';

  /**
   * Redirects service.
   * @module api/RedirectsApi
   * @version 6.7.0.22
   */

  /**
   * Constructs a new RedirectsApi. 
   * @alias module:api/RedirectsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getRedirects operation.
     * @callback module:api/RedirectsApi~getRedirectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Redirection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of redirects
     * Retrieve a list of redirects for the current user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/RedirectsApi~getRedirectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Redirection>}
     */
    this.getRedirects = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Redirection];

      return this.apiClient.callApi(
        '/redirects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the redirectsRedirectIdGet operation.
     * @callback module:api/RedirectsApi~redirectsRedirectIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Redirection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a Redirection
     * Fetch the Redirection with the given {redirectId}
     * @param {String} redirectId Id of the Redirection that will be fetched
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/RedirectsApi~redirectsRedirectIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Redirection}
     */
    this.redirectsRedirectIdGet = function(redirectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'redirectId' is set
      if (redirectId === undefined || redirectId === null) {
        throw new Error("Missing the required parameter 'redirectId' when calling redirectsRedirectIdGet");
      }


      var pathParams = {
        'redirectId': redirectId
      };
      var queryParams = {
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Redirection;

      return this.apiClient.callApi(
        '/redirects/{redirectId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the redirectsRedirectIdPut operation.
     * @callback module:api/RedirectsApi~redirectsRedirectIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Redirection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Redirection
     * Update the Redirection with the given {redirectId}
     * @param {String} redirectId Id of the Redirection that will be updated
     * @param {module:model/Redirection} redirection Redirection-Object with updated values that should be applied
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/RedirectsApi~redirectsRedirectIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Redirection}
     */
    this.redirectsRedirectIdPut = function(redirectId, redirection, opts, callback) {
      opts = opts || {};
      var postBody = redirection;

      // verify the required parameter 'redirectId' is set
      if (redirectId === undefined || redirectId === null) {
        throw new Error("Missing the required parameter 'redirectId' when calling redirectsRedirectIdPut");
      }

      // verify the required parameter 'redirection' is set
      if (redirection === undefined || redirection === null) {
        throw new Error("Missing the required parameter 'redirection' when calling redirectsRedirectIdPut");
      }


      var pathParams = {
        'redirectId': redirectId
      };
      var queryParams = {
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Redirection;

      return this.apiClient.callApi(
        '/redirects/{redirectId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
