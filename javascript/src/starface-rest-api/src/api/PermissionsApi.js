/**
 * STARFACE Rest Api
 * A Rest API for STARFACE
 *
 * OpenAPI spec version: 6.7.0.22
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PermissionInfo', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PermissionInfo'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.StarfaceRestApi) {
      root.StarfaceRestApi = {};
    }
    root.StarfaceRestApi.PermissionsApi = factory(root.StarfaceRestApi.ApiClient, root.StarfaceRestApi.PermissionInfo, root.StarfaceRestApi.User);
  }
}(this, function(ApiClient, PermissionInfo, User) {
  'use strict';

  /**
   * Permissions service.
   * @module api/PermissionsApi
   * @version 6.7.0.22
   */

  /**
   * Constructs a new PermissionsApi. 
   * @alias module:api/PermissionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getPermissions operation.
     * @callback module:api/PermissionsApi~getPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PermissionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of permissions
     * Retrieve a list of all existing STARFACE permissions.
     * @param {module:api/PermissionsApi~getPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PermissionInfo>}
     */
    this.getPermissions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PermissionInfo];

      return this.apiClient.callApi(
        '/permissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserPermissions operation.
     * @callback module:api/PermissionsApi~getUserPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PermissionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of permissions for user
     * Retrieve a list of STARFACE permissions for user with the given {userId}
     * @param {Number} userId Id of the User which persissions will be fetched
     * @param {module:api/PermissionsApi~getUserPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PermissionInfo>}
     */
    this.getUserPermissions = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserPermissions");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PermissionInfo];

      return this.apiClient.callApi(
        '/permissions/users/{userId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersWithPermission operation.
     * @callback module:api/PermissionsApi~getUsersWithPermissionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve users with specified permission
     * Retrieve users which have permission with the given {permissionId}
     * @param {Number} permissionId Id of the Permission to search
     * @param {module:api/PermissionsApi~getUsersWithPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.getUsersWithPermission = function(permissionId, callback) {
      var postBody = null;

      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling getUsersWithPermission");
      }


      var pathParams = {
        'permissionId': permissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/permissions/{permissionId}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putUserPermissions operation.
     * @callback module:api/PermissionsApi~putUserPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user&#39;s permissions
     * Set the STARFACE user&#39;s permissions with the given {userId}. Permissions user had before and not specified in this query will be removed
     * @param {Number} userId Id of the User that will be updated
     * @param {Array.<module:model/Number>} permissions Array of permission Ids that should be granted to user
     * @param {module:api/PermissionsApi~putUserPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putUserPermissions = function(userId, permissions, callback) {
      var postBody = permissions;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putUserPermissions");
      }

      // verify the required parameter 'permissions' is set
      if (permissions === undefined || permissions === null) {
        throw new Error("Missing the required parameter 'permissions' when calling putUserPermissions");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/permissions/users/{userId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePermissionForUsers operation.
     * @callback module:api/PermissionsApi~updatePermissionForUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update permission for users
     * Update permission with the given {permissionId} for users specified in usersList. Permission will be granted if \&quot;granted\&quot; parameter established to true and removed if false
     * @param {Array.<module:model/Number>} usersList List of user ids for updating permission with given {permissionId}
     * @param {Number} permissionId Id of the Permission
     * @param {Boolean} granted Boolean parameter that define will be permission granted or removed
     * @param {module:api/PermissionsApi~updatePermissionForUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePermissionForUsers = function(usersList, permissionId, granted, callback) {
      var postBody = usersList;

      // verify the required parameter 'usersList' is set
      if (usersList === undefined || usersList === null) {
        throw new Error("Missing the required parameter 'usersList' when calling updatePermissionForUsers");
      }

      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling updatePermissionForUsers");
      }

      // verify the required parameter 'granted' is set
      if (granted === undefined || granted === null) {
        throw new Error("Missing the required parameter 'granted' when calling updatePermissionForUsers");
      }


      var pathParams = {
        'permissionId': permissionId
      };
      var queryParams = {
        'granted': granted,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/permissions/{permissionId}/users', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
