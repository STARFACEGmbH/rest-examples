/**
 * STARFACE Rest Api
 * A Rest API for STARFACE
 *
 * OpenAPI spec version: 6.7.0.22
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CallService'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CallService'));
  } else {
    // Browser globals (root is window)
    if (!root.StarfaceRestApi) {
      root.StarfaceRestApi = {};
    }
    root.StarfaceRestApi.CallServicesApi = factory(root.StarfaceRestApi.ApiClient, root.StarfaceRestApi.CallService);
  }
}(this, function(ApiClient, CallService) {
  'use strict';

  /**
   * CallServices service.
   * @module api/CallServicesApi
   * @version 6.7.0.22
   */

  /**
   * Constructs a new CallServicesApi. 
   * @alias module:api/CallServicesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCallService operation.
     * @callback module:api/CallServicesApi~getCallServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a CallService
     * Fetch the CallService with the given {serviceId}
     * @param {Number} serviceId Id of the CallService that will be fetched
     * @param {module:api/CallServicesApi~getCallServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallService}
     */
    this.getCallService = function(serviceId, callback) {
      var postBody = null;

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getCallService");
      }


      var pathParams = {
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CallService;

      return this.apiClient.callApi(
        '/callservices/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallServices operation.
     * @callback module:api/CallServicesApi~getCallServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CallService>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrive a list of all available call services
     * @param {Object} opts Optional parameters
     * @param {String} opts.type filter for a call service type. If none or an invalid type is provided the type filter will default to FOR_USER_ACCOUNTS
     * @param {module:api/CallServicesApi~getCallServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CallService>}
     */
    this.getCallServices = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'type': opts['type'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CallService];

      return this.apiClient.callApi(
        '/callservices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
