/**
 * STARFACE Rest Api
 * A Rest API for STARFACE
 *
 * OpenAPI spec version: 6.7.0.22
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Account', 'model/ManagedConference', 'model/ManagedConferenceSummary', 'model/NumberForPhoneAssignment', 'model/PermissionInfo', 'model/PhoneAssignment', 'model/PhoneConfig', 'model/PhoneNumberAssignment', 'model/PhoneNumberConfig', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Account'), require('../model/ManagedConference'), require('../model/ManagedConferenceSummary'), require('../model/NumberForPhoneAssignment'), require('../model/PermissionInfo'), require('../model/PhoneAssignment'), require('../model/PhoneConfig'), require('../model/PhoneNumberAssignment'), require('../model/PhoneNumberConfig'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.StarfaceRestApi) {
      root.StarfaceRestApi = {};
    }
    root.StarfaceRestApi.UsersApi = factory(root.StarfaceRestApi.ApiClient, root.StarfaceRestApi.Account, root.StarfaceRestApi.ManagedConference, root.StarfaceRestApi.ManagedConferenceSummary, root.StarfaceRestApi.NumberForPhoneAssignment, root.StarfaceRestApi.PermissionInfo, root.StarfaceRestApi.PhoneAssignment, root.StarfaceRestApi.PhoneConfig, root.StarfaceRestApi.PhoneNumberAssignment, root.StarfaceRestApi.PhoneNumberConfig, root.StarfaceRestApi.User);
  }
}(this, function(ApiClient, Account, ManagedConference, ManagedConferenceSummary, NumberForPhoneAssignment, PermissionInfo, PhoneAssignment, PhoneConfig, PhoneNumberAssignment, PhoneNumberConfig, User) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 6.7.0.22
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the assignPhone operation.
     * @callback module:api/UsersApi~assignPhoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assignes a phone to the User
     * Assigns a phone to the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {module:model/PhoneAssignment} phoneAssignment phoneAssignment
     * @param {module:api/UsersApi~assignPhoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.assignPhone = function(userId, phoneAssignment, callback) {
      var postBody = phoneAssignment;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling assignPhone");
      }

      // verify the required parameter 'phoneAssignment' is set
      if (phoneAssignment === undefined || phoneAssignment === null) {
        throw new Error("Missing the required parameter 'phoneAssignment' when calling assignPhone");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/phoneconfig/phones', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the assignPhoneNumber operation.
     * @callback module:api/UsersApi~assignPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhoneNumberAssignment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns phone numbers to the User
     * Assigns phone numbers to the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {Array.<module:model/PhoneNumberAssignment>} phoneNumberAssignments A List of PhoneNumberAssignment-Objects
     * @param {module:api/UsersApi~assignPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhoneNumberAssignment>}
     */
    this.assignPhoneNumber = function(userId, phoneNumberAssignments, callback) {
      var postBody = phoneNumberAssignments;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling assignPhoneNumber");
      }

      // verify the required parameter 'phoneNumberAssignments' is set
      if (phoneNumberAssignments === undefined || phoneNumberAssignments === null) {
        throw new Error("Missing the required parameter 'phoneNumberAssignments' when calling assignPhoneNumber");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PhoneNumberAssignment];

      return this.apiClient.callApi(
        '/users/{userId}/phonenumberconfig/phonenumbers/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAvatar operation.
     * @callback module:api/UsersApi~deleteAvatarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the Avatar
     * Delete the Avatar of the user with the given {userId}
     * @param {Number} userId Id of the User thats avatar will be updated
     * @param {module:api/UsersApi~deleteAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAvatar = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteAvatar");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/avatar', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteManagedConference operation.
     * @callback module:api/UsersApi~deleteManagedConferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a managed conference
     * Delete the managed conference with the given {conferenceId}
     * @param {Number} userId Id of the user
     * @param {Number} conferenceId Id of the conference
     * @param {module:api/UsersApi~deleteManagedConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteManagedConference = function(userId, conferenceId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteManagedConference");
      }

      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling deleteManagedConference");
      }


      var pathParams = {
        'userId': userId,
        'conferenceId': conferenceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/managedConferences/{conferenceId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePhoneAssignment operation.
     * @callback module:api/UsersApi~deletePhoneAssignmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the PhoneAssignment
     * Deletes the PhoneAssignment from the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {Number} phoneId Id of a phone
     * @param {module:api/UsersApi~deletePhoneAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePhoneAssignment = function(userId, phoneId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deletePhoneAssignment");
      }

      // verify the required parameter 'phoneId' is set
      if (phoneId === undefined || phoneId === null) {
        throw new Error("Missing the required parameter 'phoneId' when calling deletePhoneAssignment");
      }


      var pathParams = {
        'userId': userId,
        'phoneId': phoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/phoneconfig/phones/{phoneId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePhoneNumberAssignment operation.
     * @callback module:api/UsersApi~deletePhoneNumberAssignmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the PhoneNumberAssignment
     * Deletes the PhoneNumberAssignment from the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {Number} phoneNumberId Id of the PhoneNumber that gets unassigned from the User with the given {userId}
     * @param {module:api/UsersApi~deletePhoneNumberAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePhoneNumberAssignment = function(userId, phoneNumberId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deletePhoneNumberAssignment");
      }

      // verify the required parameter 'phoneNumberId' is set
      if (phoneNumberId === undefined || phoneNumberId === null) {
        throw new Error("Missing the required parameter 'phoneNumberId' when calling deletePhoneNumberAssignment");
      }


      var pathParams = {
        'userId': userId,
        'phoneNumberId': phoneNumberId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/phonenumberconfig/phonenumbers/{phoneNumberId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePhoneNumberAssignments operation.
     * @callback module:api/UsersApi~deletePhoneNumberAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the PhoneNumberAssignments
     * Deletes the PhoneNumberAssignments from the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {Array.<module:model/PhoneNumberAssignment>} phoneNumberAssignments A List of PhoneNumberAssignment-Objects
     * @param {module:api/UsersApi~deletePhoneNumberAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePhoneNumberAssignments = function(userId, phoneNumberAssignments, callback) {
      var postBody = phoneNumberAssignments;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deletePhoneNumberAssignments");
      }

      // verify the required parameter 'phoneNumberAssignments' is set
      if (phoneNumberAssignments === undefined || phoneNumberAssignments === null) {
        throw new Error("Missing the required parameter 'phoneNumberAssignments' when calling deletePhoneNumberAssignments");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/phonenumberconfig/phonenumbers/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * Delete the STARFACE user with the given {userId}
     * @param {Number} userId Id of the User that will be deleted
     * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUser = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUser");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountsList operation.
     * @callback module:api/UsersApi~getAccountsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of accounts
     * Retrieve a list of accounts.
     * @param {module:api/UsersApi~getAccountsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    this.getAccountsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Account];

      return this.apiClient.callApi(
        '/accounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvatar operation.
     * @callback module:api/UsersApi~getAvatarCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the Avatar
     * Fetch the Avatar of the user with the given {userId}
     * @param {Number} userId Id of the User thats avatar will be fetched
     * @param {module:api/UsersApi~getAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.getAvatar = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAvatar");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['image/png', 'image/jpeg', 'image/gif'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/users/{userId}/avatar', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getManagedConference operation.
     * @callback module:api/UsersApi~getManagedConferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedConference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch ManagedConference
     * Fetch the ManagedConference of the User with the given {userId} and {conferenceId}
     * @param {Number} userId Id of the user
     * @param {Number} conferenceId Id of the conference
     * @param {module:api/UsersApi~getManagedConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedConference}
     */
    this.getManagedConference = function(userId, conferenceId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getManagedConference");
      }

      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling getManagedConference");
      }


      var pathParams = {
        'userId': userId,
        'conferenceId': conferenceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ManagedConference;

      return this.apiClient.callApi(
        '/users/{userId}/managedConferences/{conferenceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getManagedConferenceList operation.
     * @callback module:api/UsersApi~getManagedConferenceListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ManagedConferenceSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch ManagedConferenceSummaryList
     * Fetch the ManagedConferenceSummaryList of the User with the given {userId}
     * @param {Number} userId Id of the user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number for this request. This parameter is 0-indexed. Value 0 returns the first page
     * @param {Number} opts.pagesize The page size to use. Default is 20.
     * @param {String} opts.sort The fieldname to sort for.
     * @param {String} opts.sortdirection The sort direction. &#39;ASC&#39; for ascending, &#39;DESC&#39; for descending
     * @param {module:api/UsersApi~getManagedConferenceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ManagedConferenceSummary>}
     */
    this.getManagedConferenceList = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getManagedConferenceList");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'page': opts['page'],
        'pagesize': opts['pagesize'],
        'sort': opts['sort'],
        'sortdirection': opts['sortdirection'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ManagedConferenceSummary];

      return this.apiClient.callApi(
        '/users/{userId}/managedConferences', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNumbersForAssignedPhone operation.
     * @callback module:api/UsersApi~getNumbersForAssignedPhoneCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NumberForPhoneAssignment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches a list of NumberForPhoneAssignment
     * Fetches a list of NumberForPhoneAssignment of the User with the given {userId} and the Phone with the given {phoneId}.
     * @param {Number} userId Id of the User
     * @param {Number} phoneId Id of a phone
     * @param {module:api/UsersApi~getNumbersForAssignedPhoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NumberForPhoneAssignment>}
     */
    this.getNumbersForAssignedPhone = function(userId, phoneId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getNumbersForAssignedPhone");
      }

      // verify the required parameter 'phoneId' is set
      if (phoneId === undefined || phoneId === null) {
        throw new Error("Missing the required parameter 'phoneId' when calling getNumbersForAssignedPhone");
      }


      var pathParams = {
        'userId': userId,
        'phoneId': phoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NumberForPhoneAssignment];

      return this.apiClient.callApi(
        '/users/{userId}/phoneconfig/phones/{phoneId}/numbers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhoneAssignment operation.
     * @callback module:api/UsersApi~getPhoneAssignmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the PhoneAssignment
     * Fetches the PhoneAssignment for the corresponding {phoneId} of the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {Number} phoneId Id of a phone
     * @param {module:api/UsersApi~getPhoneAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPhoneAssignment = function(userId, phoneId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPhoneAssignment");
      }

      // verify the required parameter 'phoneId' is set
      if (phoneId === undefined || phoneId === null) {
        throw new Error("Missing the required parameter 'phoneId' when calling getPhoneAssignment");
      }


      var pathParams = {
        'userId': userId,
        'phoneId': phoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/phoneconfig/phones/{phoneId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhoneConfig operation.
     * @callback module:api/UsersApi~getPhoneConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhoneConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the PhoneConfig
     * Fetch the PhoneConfig of the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {module:api/UsersApi~getPhoneConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhoneConfig}
     */
    this.getPhoneConfig = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPhoneConfig");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PhoneConfig;

      return this.apiClient.callApi(
        '/users/{userId}/phoneconfig', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhoneNumberAssignment operation.
     * @callback module:api/UsersApi~getPhoneNumberAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhoneNumberAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the PhoneNumberAssignment
     * Fetches the PhoneNumberAssignment for the corresponding {phoneNumberId} of the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {Number} phoneNumberId Id of the PhoneNumber thats is assigned to the User with the given {userId}
     * @param {module:api/UsersApi~getPhoneNumberAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhoneNumberAssignment}
     */
    this.getPhoneNumberAssignment = function(userId, phoneNumberId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPhoneNumberAssignment");
      }

      // verify the required parameter 'phoneNumberId' is set
      if (phoneNumberId === undefined || phoneNumberId === null) {
        throw new Error("Missing the required parameter 'phoneNumberId' when calling getPhoneNumberAssignment");
      }


      var pathParams = {
        'userId': userId,
        'phoneNumberId': phoneNumberId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PhoneNumberAssignment;

      return this.apiClient.callApi(
        '/users/{userId}/phonenumberconfig/phonenumbers/{phoneNumberId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhoneNumberConfig operation.
     * @callback module:api/UsersApi~getPhoneNumberConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhoneNumberConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the PhoneNumberConfig
     * Fetch the PhoneNumberConfig of the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {module:api/UsersApi~getPhoneNumberConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhoneNumberConfig}
     */
    this.getPhoneNumberConfig = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPhoneNumberConfig");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PhoneNumberConfig;

      return this.apiClient.callApi(
        '/users/{userId}/phonenumberconfig', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UsersApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a user
     * Fetch the STARFACE user with the given {userId}
     * @param {Number} userId Id of the User that will be fetched
     * @param {module:api/UsersApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getUser = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUser");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/{userId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserPermissions operation.
     * @callback module:api/UsersApi~getUserPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PermissionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of permissions for user
     * Retrieve a list of STARFACE permissions for user with the given {userId}
     * @param {Number} userId Id of the User which persissions will be fetched
     * @param {module:api/UsersApi~getUserPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PermissionInfo>}
     */
    this.getUserPermissions = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserPermissions");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PermissionInfo];

      return this.apiClient.callApi(
        '/permissions/users/{userId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/UsersApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of users
     * Retrieve a list of STARFACE users the current user can access.
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm The searchTerm to query users.
     * @param {module:api/UsersApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.getUsers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'searchTerm': opts['searchTerm'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersWithPermission operation.
     * @callback module:api/UsersApi~getUsersWithPermissionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve users with specified permission
     * Retrieve users which have permission with the given {permissionId}
     * @param {Number} permissionId Id of the Permission to search
     * @param {module:api/UsersApi~getUsersWithPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.getUsersWithPermission = function(permissionId, callback) {
      var postBody = null;

      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling getUsersWithPermission");
      }


      var pathParams = {
        'permissionId': permissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/permissions/{permissionId}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssignedPhones operation.
     * @callback module:api/UsersApi~listAssignedPhonesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhoneAssignment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches a list of assigned phones
     * Fetches a list of assigned phones for the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {module:api/UsersApi~listAssignedPhonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhoneAssignment>}
     */
    this.listAssignedPhones = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listAssignedPhones");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PhoneAssignment];

      return this.apiClient.callApi(
        '/users/{userId}/phoneconfig/phones', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listPhoneNumberAssignment operation.
     * @callback module:api/UsersApi~listPhoneNumberAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhoneNumberAssignment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches a list of assigned phone numbers
     * Fetches a list of assigned phone numbers for the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {module:api/UsersApi~listPhoneNumberAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhoneNumberAssignment>}
     */
    this.listPhoneNumberAssignment = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listPhoneNumberAssignment");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PhoneNumberAssignment];

      return this.apiClient.callApi(
        '/users/{userId}/phonenumberconfig/phonenumbers/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postManagedConference operation.
     * @callback module:api/UsersApi~postManagedConferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new managed conference
     * @param {Number} userId Id of the user
     * @param {module:model/ManagedConference} conference Managed conference object to be created
     * @param {module:api/UsersApi~postManagedConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postManagedConference = function(userId, conference, callback) {
      var postBody = conference;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling postManagedConference");
      }

      // verify the required parameter 'conference' is set
      if (conference === undefined || conference === null) {
        throw new Error("Missing the required parameter 'conference' when calling postManagedConference");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/managedConferences', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postUser operation.
     * @callback module:api/UsersApi~postUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user
     * Create a new STARFACE user
     * @param {module:model/User} user User object to add
     * @param {module:api/UsersApi~postUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postUser = function(user, callback) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling postUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putAvatar operation.
     * @callback module:api/UsersApi~putAvatarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the Avatar
     * Set the Avatar of the user with the given {userId}
     * @param {Blob} image Image png
     * @param {Number} userId Id of the User thats avatar will be updated
     * @param {module:api/UsersApi~putAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putAvatar = function(image, userId, callback) {
      var postBody = image;

      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling putAvatar");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putAvatar");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['image/png', 'image/jpeg', 'image/gif'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/avatar', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putManagedConference operation.
     * @callback module:api/UsersApi~putManagedConferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update ManagedConference
     * Update the ManagedConference of the User with the given {userId} and {conferenceId}
     * @param {Number} userId Id of the user
     * @param {Number} conferenceId Id of the conference
     * @param {module:model/ManagedConference} conference ManagedConference-Object with updated values that should be applied
     * @param {module:api/UsersApi~putManagedConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putManagedConference = function(userId, conferenceId, conference, callback) {
      var postBody = conference;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putManagedConference");
      }

      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling putManagedConference");
      }

      // verify the required parameter 'conference' is set
      if (conference === undefined || conference === null) {
        throw new Error("Missing the required parameter 'conference' when calling putManagedConference");
      }


      var pathParams = {
        'userId': userId,
        'conferenceId': conferenceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/managedConferences/{conferenceId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putPhoneConfig operation.
     * @callback module:api/UsersApi~putPhoneConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the PhoneConfig
     * Update the PhoneConfig of the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {module:model/PhoneConfig} phoneConfig phoneConfig to update
     * @param {module:api/UsersApi~putPhoneConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putPhoneConfig = function(userId, phoneConfig, callback) {
      var postBody = phoneConfig;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putPhoneConfig");
      }

      // verify the required parameter 'phoneConfig' is set
      if (phoneConfig === undefined || phoneConfig === null) {
        throw new Error("Missing the required parameter 'phoneConfig' when calling putPhoneConfig");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/phoneconfig', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putPhoneNumberConfig operation.
     * @callback module:api/UsersApi~putPhoneNumberConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhoneNumberConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the PhoneNumberConfig
     * Update the PhoneNumberConfig of the User with the given {userId}
     * @param {Number} userId Id of the User thats PhoneNumberConfig will be updated
     * @param {module:model/PhoneNumberConfig} phoneNumberConfig PhoneNumberConfig-Object with updated values that should be applied
     * @param {module:api/UsersApi~putPhoneNumberConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhoneNumberConfig}
     */
    this.putPhoneNumberConfig = function(userId, phoneNumberConfig, callback) {
      var postBody = phoneNumberConfig;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putPhoneNumberConfig");
      }

      // verify the required parameter 'phoneNumberConfig' is set
      if (phoneNumberConfig === undefined || phoneNumberConfig === null) {
        throw new Error("Missing the required parameter 'phoneNumberConfig' when calling putPhoneNumberConfig");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PhoneNumberConfig;

      return this.apiClient.callApi(
        '/users/{userId}/phonenumberconfig', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putUser operation.
     * @callback module:api/UsersApi~putUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * Update the STARFACE user with the given {userId}
     * @param {Number} userId Id of the User that will be updated
     * @param {module:model/User} user User-Object with updated values that should be applied
     * @param {module:api/UsersApi~putUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putUser = function(userId, user, callback) {
      var postBody = user;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putUser");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling putUser");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putUserPermissions operation.
     * @callback module:api/UsersApi~putUserPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user&#39;s permissions
     * Set the STARFACE user&#39;s permissions with the given {userId}. Permissions user had before and not specified in this query will be removed
     * @param {Number} userId Id of the User that will be updated
     * @param {Array.<module:model/Number>} permissions Array of permission Ids that should be granted to user
     * @param {module:api/UsersApi~putUserPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putUserPermissions = function(userId, permissions, callback) {
      var postBody = permissions;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putUserPermissions");
      }

      // verify the required parameter 'permissions' is set
      if (permissions === undefined || permissions === null) {
        throw new Error("Missing the required parameter 'permissions' when calling putUserPermissions");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/permissions/users/{userId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startManagedConference operation.
     * @callback module:api/UsersApi~startManagedConferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start ManagedConference
     * Start the ManagedConference of the User with the given {userId} and {conferenceId}
     * @param {Number} userId Id of the user
     * @param {Number} conferenceId Id of the conference
     * @param {Object} opts Optional parameters
     * @param {String} opts.phoneName The name of the phone to enter the conference. If empty the given phonenumber is used
     * @param {module:api/UsersApi~startManagedConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.startManagedConference = function(userId, conferenceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling startManagedConference");
      }

      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling startManagedConference");
      }


      var pathParams = {
        'userId': userId,
        'conferenceId': conferenceId
      };
      var queryParams = {
        'phoneName': opts['phoneName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/managedConferences/{conferenceId}/start', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNumbersForAssignedPhones operation.
     * @callback module:api/UsersApi~updateNumbersForAssignedPhonesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the list of NumberForPhoneAssignment
     * Updates the list of NumberForPhoneAssignment of the User with the given {userId} and the Phone with the given {phoneId}. Only the active-flag can be changed. Elements in the list cannot be added or removed.
     * @param {Number} userId Id of the User
     * @param {Number} phoneId Id of a phone
     * @param {module:api/UsersApi~updateNumbersForAssignedPhonesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateNumbersForAssignedPhones = function(userId, phoneId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateNumbersForAssignedPhones");
      }

      // verify the required parameter 'phoneId' is set
      if (phoneId === undefined || phoneId === null) {
        throw new Error("Missing the required parameter 'phoneId' when calling updateNumbersForAssignedPhones");
      }


      var pathParams = {
        'userId': userId,
        'phoneId': phoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/phoneconfig/phones/{phoneId}/numbers', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePermissionForUsers operation.
     * @callback module:api/UsersApi~updatePermissionForUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update permission for users
     * Update permission with the given {permissionId} for users specified in usersList. Permission will be granted if \&quot;granted\&quot; parameter established to true and removed if false
     * @param {Array.<module:model/Number>} usersList List of user ids for updating permission with given {permissionId}
     * @param {Number} permissionId Id of the Permission
     * @param {Boolean} granted Boolean parameter that define will be permission granted or removed
     * @param {module:api/UsersApi~updatePermissionForUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePermissionForUsers = function(usersList, permissionId, granted, callback) {
      var postBody = usersList;

      // verify the required parameter 'usersList' is set
      if (usersList === undefined || usersList === null) {
        throw new Error("Missing the required parameter 'usersList' when calling updatePermissionForUsers");
      }

      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling updatePermissionForUsers");
      }

      // verify the required parameter 'granted' is set
      if (granted === undefined || granted === null) {
        throw new Error("Missing the required parameter 'granted' when calling updatePermissionForUsers");
      }


      var pathParams = {
        'permissionId': permissionId
      };
      var queryParams = {
        'granted': granted,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/permissions/{permissionId}/users', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePhoneNumberAssignments operation.
     * @callback module:api/UsersApi~updatePhoneNumberAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhoneNumberAssignment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update PhoneNumberAssignments of the User
     * Update the PhoneNumberAssignment with the given {phoneNumberId} of the User with the given {userId}
     * @param {Number} userId Id of the User
     * @param {Array.<module:model/PhoneNumberAssignment>} phoneNumberAssignments A List of PhoneNumberAssignment-Objects
     * @param {module:api/UsersApi~updatePhoneNumberAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhoneNumberAssignment>}
     */
    this.updatePhoneNumberAssignments = function(userId, phoneNumberAssignments, callback) {
      var postBody = phoneNumberAssignments;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updatePhoneNumberAssignments");
      }

      // verify the required parameter 'phoneNumberAssignments' is set
      if (phoneNumberAssignments === undefined || phoneNumberAssignments === null) {
        throw new Error("Missing the required parameter 'phoneNumberAssignments' when calling updatePhoneNumberAssignments");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PhoneNumberAssignment];

      return this.apiClient.callApi(
        '/users/{userId}/phonenumberconfig/phonenumbers', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersMeGet operation.
     * @callback module:api/UsersApi~usersMeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get own user
     * endpoint alias for /users/{userId} of the user that is corrently logged in
     * @param {module:api/UsersApi~usersMeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.usersMeGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/me', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
