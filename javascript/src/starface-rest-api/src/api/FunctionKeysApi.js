/**
 * STARFACE Rest Api
 * A Rest API for STARFACE
 *
 * OpenAPI spec version: 6.7.0.22
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EditFunctionKey', 'model/FunctionKey', 'model/FunctionKeySet', 'model/FunctionKeySetError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EditFunctionKey'), require('../model/FunctionKey'), require('../model/FunctionKeySet'), require('../model/FunctionKeySetError'));
  } else {
    // Browser globals (root is window)
    if (!root.StarfaceRestApi) {
      root.StarfaceRestApi = {};
    }
    root.StarfaceRestApi.FunctionKeysApi = factory(root.StarfaceRestApi.ApiClient, root.StarfaceRestApi.EditFunctionKey, root.StarfaceRestApi.FunctionKey, root.StarfaceRestApi.FunctionKeySet, root.StarfaceRestApi.FunctionKeySetError);
  }
}(this, function(ApiClient, EditFunctionKey, FunctionKey, FunctionKeySet, FunctionKeySetError) {
  'use strict';

  /**
   * FunctionKeys service.
   * @module api/FunctionKeysApi
   * @version 6.7.0.22
   */

  /**
   * Constructs a new FunctionKeysApi. 
   * @alias module:api/FunctionKeysApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createFunctionKey operation.
     * @callback module:api/FunctionKeysApi~createFunctionKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new FunctionKey and appends it to the end of the FunctionKeySet if no position is provided. Otherwise the Functionkey will shift other keys aside.
     * @param {String} fkSetId The Id of the FunctionKeySet
     * @param {module:model/FunctionKey} functionKey The new functionKey to create
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/FunctionKeysApi~createFunctionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionKey}
     */
    this.createFunctionKey = function(fkSetId, functionKey, opts, callback) {
      opts = opts || {};
      var postBody = functionKey;

      // verify the required parameter 'fkSetId' is set
      if (fkSetId === undefined || fkSetId === null) {
        throw new Error("Missing the required parameter 'fkSetId' when calling createFunctionKey");
      }

      // verify the required parameter 'functionKey' is set
      if (functionKey === undefined || functionKey === null) {
        throw new Error("Missing the required parameter 'functionKey' when calling createFunctionKey");
      }


      var pathParams = {
        'fkSetId': fkSetId
      };
      var queryParams = {
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FunctionKey;

      return this.apiClient.callApi(
        '/functionkeysets/{fkSetId}/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFunctionKey operation.
     * @callback module:api/FunctionKeysApi~deleteFunctionKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the FunctionKey with the given {keyId}
     * @param {String} fkSetId The Id of the FunctionKeySet
     * @param {String} keyId The Id of the FunctionKey
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/FunctionKeysApi~deleteFunctionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFunctionKey = function(fkSetId, keyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fkSetId' is set
      if (fkSetId === undefined || fkSetId === null) {
        throw new Error("Missing the required parameter 'fkSetId' when calling deleteFunctionKey");
      }

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling deleteFunctionKey");
      }


      var pathParams = {
        'fkSetId': fkSetId,
        'keyId': keyId
      };
      var queryParams = {
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/functionkeysets/{fkSetId}/{keyId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditFunctionKey operation.
     * @callback module:api/FunctionKeysApi~getEditFunctionKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditFunctionKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns edit informations for the given key {keyId}
     * @param {String} fkSetId The Id of the FunctionKeySet
     * @param {String} keyId The Id of the FunctionKey
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/FunctionKeysApi~getEditFunctionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditFunctionKey}
     */
    this.getEditFunctionKey = function(fkSetId, keyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fkSetId' is set
      if (fkSetId === undefined || fkSetId === null) {
        throw new Error("Missing the required parameter 'fkSetId' when calling getEditFunctionKey");
      }

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling getEditFunctionKey");
      }


      var pathParams = {
        'fkSetId': fkSetId,
        'keyId': keyId
      };
      var queryParams = {
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EditFunctionKey;

      return this.apiClient.callApi(
        '/functionkeysets/{fkSetId}/edit/{keyId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditFunctionKeyDefaults operation.
     * @callback module:api/FunctionKeysApi~getEditFunctionKeyDefaultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditFunctionKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns edit possible edit informations
     * @param {module:api/FunctionKeysApi~getEditFunctionKeyDefaultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditFunctionKey}
     */
    this.getEditFunctionKeyDefaults = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EditFunctionKey;

      return this.apiClient.callApi(
        '/functionkeysets/edit/defaults', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFunctionKey operation.
     * @callback module:api/FunctionKeysApi~getFunctionKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the FunctionKey with the given {keyId}
     * @param {String} fkSetId The Id of the FunctionKeySet
     * @param {String} keyId The Id of the FunctionKey
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/FunctionKeysApi~getFunctionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionKey}
     */
    this.getFunctionKey = function(fkSetId, keyId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fkSetId' is set
      if (fkSetId === undefined || fkSetId === null) {
        throw new Error("Missing the required parameter 'fkSetId' when calling getFunctionKey");
      }

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling getFunctionKey");
      }


      var pathParams = {
        'fkSetId': fkSetId,
        'keyId': keyId
      };
      var queryParams = {
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FunctionKey;

      return this.apiClient.callApi(
        '/functionkeysets/{fkSetId}/{keyId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFunctionKeySets operation.
     * @callback module:api/FunctionKeysApi~getFunctionKeySetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FunctionKeySet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of FunctionKeySets
     * Retrieve a list of FunctionKeySets for the current user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/FunctionKeysApi~getFunctionKeySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FunctionKeySet>}
     */
    this.getFunctionKeySets = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FunctionKeySet];

      return this.apiClient.callApi(
        '/functionkeysets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFunctionKeys operation.
     * @callback module:api/FunctionKeysApi~getFunctionKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FunctionKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the list of FunctionKeys contained in the given FunctionKeySet.
     * @param {String} fkSetId The Id of the FunctionKeySet
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/FunctionKeysApi~getFunctionKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FunctionKey>}
     */
    this.getFunctionKeys = function(fkSetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fkSetId' is set
      if (fkSetId === undefined || fkSetId === null) {
        throw new Error("Missing the required parameter 'fkSetId' when calling getFunctionKeys");
      }


      var pathParams = {
        'fkSetId': fkSetId
      };
      var queryParams = {
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FunctionKey];

      return this.apiClient.callApi(
        '/functionkeysets/{fkSetId}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhonesForFunctionKeySet operation.
     * @callback module:api/FunctionKeysApi~getPhonesForFunctionKeySetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the phones for functionkeyset with the given {fkSetId}
     * @param {String} fkSetId The Id of the FunctionKeySet
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/FunctionKeysApi~getPhonesForFunctionKeySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getPhonesForFunctionKeySet = function(fkSetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fkSetId' is set
      if (fkSetId === undefined || fkSetId === null) {
        throw new Error("Missing the required parameter 'fkSetId' when calling getPhonesForFunctionKeySet");
      }


      var pathParams = {
        'fkSetId': fkSetId
      };
      var queryParams = {
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/functionkeysets/{fkSetId}/phones', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putFunctionKeySetOnPhone operation.
     * @callback module:api/FunctionKeysApi~putFunctionKeySetOnPhoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions a phone with the given function key set
     * @param {String} fkSetId The Id of the FunctionKeySet
     * @param {String} phone The phone
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/FunctionKeysApi~putFunctionKeySetOnPhoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putFunctionKeySetOnPhone = function(fkSetId, phone, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fkSetId' is set
      if (fkSetId === undefined || fkSetId === null) {
        throw new Error("Missing the required parameter 'fkSetId' when calling putFunctionKeySetOnPhone");
      }

      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling putFunctionKeySetOnPhone");
      }


      var pathParams = {
        'fkSetId': fkSetId
      };
      var queryParams = {
        'phone': phone,
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/functionkeysets/{fkSetId}/phone', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFunctionKey operation.
     * @callback module:api/FunctionKeysApi~updateFunctionKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the FunctionKey with the given {keyId}. NOTE keys on phones must be refreshed (GET /{fkSetId}/phones and PUT /{fkSetId}/phone).
     * @param {String} fkSetId The Id of the FunctionKeySet
     * @param {String} keyId The Id of the FunctionKey
     * @param {module:model/FunctionKey} functionKey The new functionKey to create
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/FunctionKeysApi~updateFunctionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateFunctionKey = function(fkSetId, keyId, functionKey, opts, callback) {
      opts = opts || {};
      var postBody = functionKey;

      // verify the required parameter 'fkSetId' is set
      if (fkSetId === undefined || fkSetId === null) {
        throw new Error("Missing the required parameter 'fkSetId' when calling updateFunctionKey");
      }

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling updateFunctionKey");
      }

      // verify the required parameter 'functionKey' is set
      if (functionKey === undefined || functionKey === null) {
        throw new Error("Missing the required parameter 'functionKey' when calling updateFunctionKey");
      }


      var pathParams = {
        'fkSetId': fkSetId,
        'keyId': keyId
      };
      var queryParams = {
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/functionkeysets/{fkSetId}/{keyId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFunctionKeySet operation.
     * @callback module:api/FunctionKeysApi~updateFunctionKeySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the FunctionKeySet with the given {fkSetId}. This operation can be used to reorder the FunctionKeys contained in this set. NOTE keys on phones must be refreshed (GET /{fkSetId}/phones and PUT /{fkSetId}/phone).
     * @param {String} fkSetId The Id of the FunctionKeySet
     * @param {Array.<module:model/FunctionKey>} functionKeys The updated FunctionKeySet to reorder FunctionKeys
     * @param {Object} opts Optional parameters
     * @param {String} opts.actOnBehalfOf Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/FunctionKeysApi~updateFunctionKeySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateFunctionKeySet = function(fkSetId, functionKeys, opts, callback) {
      opts = opts || {};
      var postBody = functionKeys;

      // verify the required parameter 'fkSetId' is set
      if (fkSetId === undefined || fkSetId === null) {
        throw new Error("Missing the required parameter 'fkSetId' when calling updateFunctionKeySet");
      }

      // verify the required parameter 'functionKeys' is set
      if (functionKeys === undefined || functionKeys === null) {
        throw new Error("Missing the required parameter 'functionKeys' when calling updateFunctionKeySet");
      }


      var pathParams = {
        'fkSetId': fkSetId
      };
      var queryParams = {
        'actOnBehalfOf': opts['actOnBehalfOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/functionkeysets/{fkSetId}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
