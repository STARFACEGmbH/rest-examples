/**
 * STARFACE Rest Api
 * A Rest API for STARFACE
 *
 * OpenAPI spec version: 6.7.0.22
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Contact', 'model/ContactList', 'model/ContactsScheme', 'model/Tag'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Contact'), require('../model/ContactList'), require('../model/ContactsScheme'), require('../model/Tag'));
  } else {
    // Browser globals (root is window)
    if (!root.StarfaceRestApi) {
      root.StarfaceRestApi = {};
    }
    root.StarfaceRestApi.ContactsApi = factory(root.StarfaceRestApi.ApiClient, root.StarfaceRestApi.Contact, root.StarfaceRestApi.ContactList, root.StarfaceRestApi.ContactsScheme, root.StarfaceRestApi.Tag);
  }
}(this, function(ApiClient, Contact, ContactList, ContactsScheme, Tag) {
  'use strict';

  /**
   * Contacts service.
   * @module api/ContactsApi
   * @version 6.7.0.22
   */

  /**
   * Constructs a new ContactsApi. 
   * @alias module:api/ContactsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteContact operation.
     * @callback module:api/ContactsApi~deleteContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a contact
     * Delete the contact with the given {contactId} from the addressbook
     * @param {String} contactId id of the contact
     * @param {module:api/ContactsApi~deleteContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteContact = function(contactId, callback) {
      var postBody = null;

      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling deleteContact");
      }


      var pathParams = {
        'contactId': contactId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/{contactId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTag operation.
     * @callback module:api/ContactsApi~deleteTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag
     * Delete the tag with the given {tagId} from the addressbook
     * @param {String} tagId id of the Tag
     * @param {module:api/ContactsApi~deleteTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTag = function(tagId, callback) {
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteTag");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/tags/{tagId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContact operation.
     * @callback module:api/ContactsApi~getContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a contact
     * Fetch the contact with the given {contactId} from the addressbook
     * @param {String} contactId id of the contact
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/ContactsApi~getContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contact}
     */
    this.getContact = function(contactId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getContact");
      }


      var pathParams = {
        'contactId': contactId
      };
      var queryParams = {
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Contact;

      return this.apiClient.callApi(
        '/contacts/{contactId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactList operation.
     * @callback module:api/ContactsApi~getContactListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of contacts
     * Retrieve a list of contacts this user can access.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {Array.<String>} opts.tags comma seperated list of tags to filter for
     * @param {String} opts.searchTerms the string to search for ... to be defined
     * @param {Number} opts.page The page number for this request
     * @param {Number} opts.pagesize The page size to use. Default is 20
     * @param {String} opts.sort The fieldname to sort for
     * @param {String} opts.sortdirection The fieldname to order for
     * @param {module:api/ContactsApi~getContactListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactList}
     */
    this.getContactList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
        'searchTerms': opts['searchTerms'],
        'page': opts['page'],
        'pagesize': opts['pagesize'],
        'sort': opts['sort'],
        'sortdirection': opts['sortdirection'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContactList;

      return this.apiClient.callApi(
        '/contacts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getScheme operation.
     * @callback module:api/ContactsApi~getSchemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactsScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Contact-Scheme
     * Get the Contact-Scheme
     * @param {Object} opts Optional parameters
     * @param {String} opts.lang Language identifiers as specified by RFC 3066 for i18nDisplayName
     * @param {module:api/ContactsApi~getSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactsScheme}
     */
    this.getScheme = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'lang': opts['lang'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContactsScheme;

      return this.apiClient.callApi(
        '/contacts/scheme', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTag operation.
     * @callback module:api/ContactsApi~getTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a tag
     * Fetch the tag with the given {tagId} from the addressbook
     * @param {String} tagId id of the Tag
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/ContactsApi~getTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    this.getTag = function(tagId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTag");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Tag;

      return this.apiClient.callApi(
        '/contacts/tags/{tagId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagList operation.
     * @callback module:api/ContactsApi~getTagListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of tags
     * Retrieve a list of tags this user can access.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {Number} opts.page The page number for this request
     * @param {Number} opts.pagesize The page size to use. Default is 20
     * @param {String} opts.sort The fieldname to sort for
     * @param {String} opts.sortdirection The fieldname to order for
     * @param {module:api/ContactsApi~getTagListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tag>}
     */
    this.getTagList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
        'page': opts['page'],
        'pagesize': opts['pagesize'],
        'sort': opts['sort'],
        'sortdirection': opts['sortdirection'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Tag];

      return this.apiClient.callApi(
        '/contacts/tags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postContact operation.
     * @callback module:api/ContactsApi~postContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new contact
     * Create a new contact
     * @param {module:model/Contact} contact user to add to the system
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/ContactsApi~postContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contact}
     */
    this.postContact = function(contact, opts, callback) {
      opts = opts || {};
      var postBody = contact;

      // verify the required parameter 'contact' is set
      if (contact === undefined || contact === null) {
        throw new Error("Missing the required parameter 'contact' when calling postContact");
      }


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Contact;

      return this.apiClient.callApi(
        '/contacts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTag operation.
     * @callback module:api/ContactsApi~postTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new tag
     * Create a new tag
     * @param {module:model/Tag} tag tag to add to the system
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/ContactsApi~postTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    this.postTag = function(tag, opts, callback) {
      opts = opts || {};
      var postBody = tag;

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling postTag");
      }


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Tag;

      return this.apiClient.callApi(
        '/contacts/tags', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putContact operation.
     * @callback module:api/ContactsApi~putContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a contact
     * Updates the contact with the given {contactId} from the provided payload
     * @param {String} contactId id of the contact
     * @param {module:model/Contact} contact updated contact
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/ContactsApi~putContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putContact = function(contactId, contact, opts, callback) {
      opts = opts || {};
      var postBody = contact;

      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling putContact");
      }

      // verify the required parameter 'contact' is set
      if (contact === undefined || contact === null) {
        throw new Error("Missing the required parameter 'contact' when calling putContact");
      }


      var pathParams = {
        'contactId': contactId
      };
      var queryParams = {
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/{contactId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putTag operation.
     * @callback module:api/ContactsApi~putTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a tag
     * Updates the tag with the given {tagId} from the addressbook
     * @param {String} tagId id of the Tag
     * @param {module:model/Tag} tag updated tag
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Perform an operation on behalf of another user. This requires administrative privileges.
     * @param {module:api/ContactsApi~putTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putTag = function(tagId, tag, opts, callback) {
      opts = opts || {};
      var postBody = tag;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling putTag");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling putTag");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/tags/{tagId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
