/**
 * STARFACE Rest Api
 * A Rest API for STARFACE
 *
 * OpenAPI spec version: 6.7.0.22
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConferenceConfiguration', 'model/ConferenceConfigurationTexts', 'model/ManagedConference', 'model/ManagedConferenceSummary'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ConferenceConfiguration'), require('../model/ConferenceConfigurationTexts'), require('../model/ManagedConference'), require('../model/ManagedConferenceSummary'));
  } else {
    // Browser globals (root is window)
    if (!root.StarfaceRestApi) {
      root.StarfaceRestApi = {};
    }
    root.StarfaceRestApi.ConferencesApi = factory(root.StarfaceRestApi.ApiClient, root.StarfaceRestApi.ConferenceConfiguration, root.StarfaceRestApi.ConferenceConfigurationTexts, root.StarfaceRestApi.ManagedConference, root.StarfaceRestApi.ManagedConferenceSummary);
  }
}(this, function(ApiClient, ConferenceConfiguration, ConferenceConfigurationTexts, ManagedConference, ManagedConferenceSummary) {
  'use strict';

  /**
   * Conferences service.
   * @module api/ConferencesApi
   * @version 6.7.0.22
   */

  /**
   * Constructs a new ConferencesApi. 
   * @alias module:api/ConferencesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteManagedConference operation.
     * @callback module:api/ConferencesApi~deleteManagedConferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a managed conference
     * Delete the managed conference with the given {conferenceId}
     * @param {Number} userId Id of the user
     * @param {Number} conferenceId Id of the conference
     * @param {module:api/ConferencesApi~deleteManagedConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteManagedConference = function(userId, conferenceId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteManagedConference");
      }

      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling deleteManagedConference");
      }


      var pathParams = {
        'userId': userId,
        'conferenceId': conferenceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/managedConferences/{conferenceId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConferenceConfiguration operation.
     * @callback module:api/ConferencesApi~getConferenceConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch default values for new managed conferences
     * Fetch the ConferenceConfiguration
     * @param {module:api/ConferencesApi~getConferenceConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceConfiguration}
     */
    this.getConferenceConfiguration = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConferenceConfiguration;

      return this.apiClient.callApi(
        '/conferenceConfiguration', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultTexts operation.
     * @callback module:api/ConferencesApi~getDefaultTextsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceConfigurationTexts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the texts for conference emails
     * Fetch the texts for conference emails
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale locale for default text
     * @param {module:api/ConferencesApi~getDefaultTextsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceConfigurationTexts}
     */
    this.getDefaultTexts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'locale': opts['locale'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConferenceConfigurationTexts;

      return this.apiClient.callApi(
        '/conferenceConfiguration/defaults', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getManagedConference operation.
     * @callback module:api/ConferencesApi~getManagedConferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedConference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch ManagedConference
     * Fetch the ManagedConference of the User with the given {userId} and {conferenceId}
     * @param {Number} userId Id of the user
     * @param {Number} conferenceId Id of the conference
     * @param {module:api/ConferencesApi~getManagedConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedConference}
     */
    this.getManagedConference = function(userId, conferenceId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getManagedConference");
      }

      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling getManagedConference");
      }


      var pathParams = {
        'userId': userId,
        'conferenceId': conferenceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ManagedConference;

      return this.apiClient.callApi(
        '/users/{userId}/managedConferences/{conferenceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getManagedConferenceList operation.
     * @callback module:api/ConferencesApi~getManagedConferenceListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ManagedConferenceSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch ManagedConferenceSummaryList
     * Fetch the ManagedConferenceSummaryList of the User with the given {userId}
     * @param {Number} userId Id of the user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number for this request. This parameter is 0-indexed. Value 0 returns the first page
     * @param {Number} opts.pagesize The page size to use. Default is 20.
     * @param {String} opts.sort The fieldname to sort for.
     * @param {String} opts.sortdirection The sort direction. &#39;ASC&#39; for ascending, &#39;DESC&#39; for descending
     * @param {module:api/ConferencesApi~getManagedConferenceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ManagedConferenceSummary>}
     */
    this.getManagedConferenceList = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getManagedConferenceList");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'page': opts['page'],
        'pagesize': opts['pagesize'],
        'sort': opts['sort'],
        'sortdirection': opts['sortdirection'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ManagedConferenceSummary];

      return this.apiClient.callApi(
        '/users/{userId}/managedConferences', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postManagedConference operation.
     * @callback module:api/ConferencesApi~postManagedConferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new managed conference
     * @param {Number} userId Id of the user
     * @param {module:model/ManagedConference} conference Managed conference object to be created
     * @param {module:api/ConferencesApi~postManagedConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postManagedConference = function(userId, conference, callback) {
      var postBody = conference;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling postManagedConference");
      }

      // verify the required parameter 'conference' is set
      if (conference === undefined || conference === null) {
        throw new Error("Missing the required parameter 'conference' when calling postManagedConference");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/managedConferences', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putConferenceConfiguration operation.
     * @callback module:api/ConferencesApi~putConferenceConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Conference Configuration
     * Update the given conference configuration by the given {userId}
     * @param {Number} userId Id of the User
     * @param {module:model/ConferenceConfiguration} conferenceConfiguration conferenceConfiguration
     * @param {module:api/ConferencesApi~putConferenceConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putConferenceConfiguration = function(userId, conferenceConfiguration, callback) {
      var postBody = conferenceConfiguration;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putConferenceConfiguration");
      }

      // verify the required parameter 'conferenceConfiguration' is set
      if (conferenceConfiguration === undefined || conferenceConfiguration === null) {
        throw new Error("Missing the required parameter 'conferenceConfiguration' when calling putConferenceConfiguration");
      }


      var pathParams = {
      };
      var queryParams = {
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conferenceConfiguration', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putManagedConference operation.
     * @callback module:api/ConferencesApi~putManagedConferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update ManagedConference
     * Update the ManagedConference of the User with the given {userId} and {conferenceId}
     * @param {Number} userId Id of the user
     * @param {Number} conferenceId Id of the conference
     * @param {module:model/ManagedConference} conference ManagedConference-Object with updated values that should be applied
     * @param {module:api/ConferencesApi~putManagedConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putManagedConference = function(userId, conferenceId, conference, callback) {
      var postBody = conference;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putManagedConference");
      }

      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling putManagedConference");
      }

      // verify the required parameter 'conference' is set
      if (conference === undefined || conference === null) {
        throw new Error("Missing the required parameter 'conference' when calling putManagedConference");
      }


      var pathParams = {
        'userId': userId,
        'conferenceId': conferenceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/managedConferences/{conferenceId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startManagedConference operation.
     * @callback module:api/ConferencesApi~startManagedConferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start ManagedConference
     * Start the ManagedConference of the User with the given {userId} and {conferenceId}
     * @param {Number} userId Id of the user
     * @param {Number} conferenceId Id of the conference
     * @param {Object} opts Optional parameters
     * @param {String} opts.phoneName The name of the phone to enter the conference. If empty the given phonenumber is used
     * @param {module:api/ConferencesApi~startManagedConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.startManagedConference = function(userId, conferenceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling startManagedConference");
      }

      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling startManagedConference");
      }


      var pathParams = {
        'userId': userId,
        'conferenceId': conferenceId
      };
      var queryParams = {
        'phoneName': opts['phoneName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/managedConferences/{conferenceId}/start', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
