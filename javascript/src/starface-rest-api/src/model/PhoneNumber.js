/**
 * STARFACE Rest Api
 * A Rest API for STARFACE
 *
 * OpenAPI spec version: 6.7.0.22
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.StarfaceRestApi) {
      root.StarfaceRestApi = {};
    }
    root.StarfaceRestApi.PhoneNumber = factory(root.StarfaceRestApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The PhoneNumber model module.
   * @module model/PhoneNumber
   * @version 6.7.0.22
   */

  /**
   * Constructs a new <code>PhoneNumber</code>.
   * A representation of a phone number
   * @alias module:model/PhoneNumber
   * @class
   * @param id {Number} the Id of the phone number
   * @param _number {String} the number itself (extention)
   * @param type {module:model/PhoneNumber.TypeEnum} the type of the phone number
   */
  var exports = function(id, _number, type) {
    var _this = this;






    _this['id'] = id;


    _this['number'] = _number;

    _this['type'] = type;
  };

  /**
   * Constructs a <code>PhoneNumber</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PhoneNumber} obj Optional instance to populate.
   * @return {module:model/PhoneNumber} The populated <code>PhoneNumber</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('assignedGroupAccountId')) {
        obj['assignedGroupAccountId'] = ApiClient.convertToType(data['assignedGroupAccountId'], 'Number');
      }
      if (data.hasOwnProperty('assignedModuleInstanceId')) {
        obj['assignedModuleInstanceId'] = ApiClient.convertToType(data['assignedModuleInstanceId'], 'String');
      }
      if (data.hasOwnProperty('assignedServiceId')) {
        obj['assignedServiceId'] = ApiClient.convertToType(data['assignedServiceId'], 'Number');
      }
      if (data.hasOwnProperty('assignedUserAccountId')) {
        obj['assignedUserAccountId'] = ApiClient.convertToType(data['assignedUserAccountId'], 'Number');
      }
      if (data.hasOwnProperty('exitCode')) {
        obj['exitCode'] = ApiClient.convertToType(data['exitCode'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('localPrefix')) {
        obj['localPrefix'] = ApiClient.convertToType(data['localPrefix'], 'String');
      }
      if (data.hasOwnProperty('nationalPrefix')) {
        obj['nationalPrefix'] = ApiClient.convertToType(data['nationalPrefix'], 'String');
      }
      if (data.hasOwnProperty('number')) {
        obj['number'] = ApiClient.convertToType(data['number'], 'String');
      }
      if (data.hasOwnProperty('numberBlockId')) {
        obj['numberBlockId'] = ApiClient.convertToType(data['numberBlockId'], 'Number');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
    }
    return obj;
  }

  /**
   * the id of the account this phone number is assigned to or null if it is not assigned to an account
   * @member {Number} assignedGroupAccountId
   */
  exports.prototype['assignedGroupAccountId'] = undefined;
  /**
   * the id of the module instance this phone number is assigned to or null if it is not assigned to a module
   * @member {String} assignedModuleInstanceId
   */
  exports.prototype['assignedModuleInstanceId'] = undefined;
  /**
   * the id of the service this phone number is assigned to or null
   * @member {Number} assignedServiceId
   */
  exports.prototype['assignedServiceId'] = undefined;
  /**
   * the id of the account this phone number is assigned to or null if it is not assigned to an account
   * @member {Number} assignedUserAccountId
   */
  exports.prototype['assignedUserAccountId'] = undefined;
  /**
   * the exit code of the phone number
   * @member {String} exitCode
   */
  exports.prototype['exitCode'] = undefined;
  /**
   * the Id of the phone number
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * the local prefix of the phone number
   * @member {String} localPrefix
   */
  exports.prototype['localPrefix'] = undefined;
  /**
   * the national prefix of the phone number
   * @member {String} nationalPrefix
   */
  exports.prototype['nationalPrefix'] = undefined;
  /**
   * the number itself (extention)
   * @member {String} number
   */
  exports.prototype['number'] = undefined;
  /**
   * the id of the corresponding NumberBlock
   * @member {Number} numberBlockId
   */
  exports.prototype['numberBlockId'] = undefined;
  /**
   * the type of the phone number
   * @member {module:model/PhoneNumber.TypeEnum} type
   */
  exports.prototype['type'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID",
    /**
     * value: "INTERNAL"
     * @const
     */
    "INTERNAL": "INTERNAL",
    /**
     * value: "EXTERNAL"
     * @const
     */
    "EXTERNAL": "EXTERNAL",
    /**
     * value: "RESERVED"
     * @const
     */
    "RESERVED": "RESERVED",
    /**
     * value: "NT"
     * @const
     */
    "NT": "NT",
    /**
     * value: "DISPLAY"
     * @const
     */
    "DISPLAY": "DISPLAY",
    /**
     * value: "FXO"
     * @const
     */
    "FXO": "FXO"  };


  return exports;
}));


